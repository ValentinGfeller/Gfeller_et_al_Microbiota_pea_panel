---
title: "Taxonomy fungi"
author: "Valentin Gfeller"
date: "`r Sys.Date()`"
output: 
  html_document: 
    toc: true
    toc_float: true
editor_options: 
  chunk_output_type: console
---


```{r setup, include=FALSE}
#global knitter option
knitr::opts_chunk$set(fig.align = "center", echo = FALSE)

# load packages
library(tidyverse)
library(here)
library(phyloseq)
library(vegan)
library(readxl)
library(ggpubr)
library(geomtextpath)
library(ggbeeswarm)
library(knitr)


# functions were written for repeatedly used code (see "/Scripts/Functions.R")
# source functions
source(here("Scripts", "Functions.R"))

# set global option for ggplot2
theme_set(theme_bw(base_size = 12))
```

Investigation of the fungal taxonomy at different ranks to characterize the root microbes present in our samples. 
# Import and check data
```{r include=FALSE}
load(here("Data", "Interim", "phy.fun.all.RData"))
load(here("Data", "Interim", "phy.fun_rel.RData"))
load(here("Data", "Interim", "phy.fun_red.RData"))

phy.fun.all

tab_tax <- tax_table(phy.fun.all) %>% data.frame()
```


# Taxonomy
## Check taxanomy of OTUs
```{r}
# rename unassigned taxa from "NA" to unassigned
tax_table(phy.fun_red) <- tax_table(phy.fun_red) %>% data.frame() %>% 
  mutate(across(everything(), ~ case_when(is.na(.) ~ "unassigned", TRUE ~ .))) %>% 
  as.matrix()
```

### Phylum
```{r}
phy.fun.all_phyl_ <- tax_glom(phy.fun_red, "Phylum")
phy.fun.all_phyl <- transform_sample_counts(phy.fun.all_phyl_, 
                                            function(x) 100 * x/sum(x)) 

# melt phyloseq object
phy.fun.all_phyl_melt <- psmelt(phy.fun.all_phyl)
phy.fun.all_phyl_melt$Phylum %>% unique()

# arrange
phy.fun.all_phyl_melt <- phy.fun.all_phyl_melt %>% arrange(genotype)
phy.fun.all_phyl_melt <- phy.fun.all_phyl_melt %>% arrange(emergence)

sort_phylum <- phy.fun.all_phyl_melt %>%
  group_by(Phylum) %>% 
  summarise(Abundance = mean(Abundance)) %>% 
  arrange(desc(Abundance)) %>% pull(Phylum)

# plot grouped by genotype origin
p <- phy.fun.all_phyl_melt %>% 
  mutate(breeding_material = factor(breeding_material,
                                    levels = c("gb", "bm", "cv")),
         genotype = factor(genotype, 
                           levels = phy.fun.all_phyl_melt$genotype %>% unique()),
         Phylum = factor(Phylum, 
                         levels = sort_phylum)) %>% 
  ggplot(aes(x = genotype, y = Abundance, fill = Phylum)) + 
  geom_bar(stat ="identity", alpha = 0.8) +
  xlab("") + 
  ylab("Relative abundance [%]") +
  facet_wrap(vars(breeding_material), scales = "free", nrow = 3,
             labeller = as_labeller(c(bm = "Breeding material",
                                      cv = "Cultivar",
                                      gb = "Gene bank"))) + 
  ggtitle("Fungi")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1,
                                   size = 3),
        strip.background = element_rect(fill = "grey90")) +
  scale_fill_brewer(palette = "Dark2")
  
p
saveRDS(p, here("Data", "Interim", "Figures", "Taxonomy_phyl_fungi.rds"))


# check overall relative abundance of individual phyla
phy.fun.all_phyl_melt %>% 
  group_by(Phylum, genotype) %>% 
  summarise(Abundance = sum(Abundance)) %>% 
  group_by(Phylum) %>% 
  summarise(
    Abundance = mean(Abundance, na.rm = TRUE),
    .groups = "drop") %>% 
  slice_max(Abundance, n = 10)

```


### Genus
```{r}
phy.fun.all_Genus_ <- tax_glom(phy.fun_red, "Genus") 
phy.fun.all_Genus <- transform_sample_counts(phy.fun.all_Genus_, function(x) 100 * x/sum(x)) 

# melt phyloseq object
phy.fun.all_Genus_melt <- psmelt(phy.fun.all_Genus) 

# arrange
phy.fun.all_Genus_melt <- phy.fun.all_Genus_melt %>% arrange(genotype)
phy.fun.all_Genus_melt <- phy.fun.all_Genus_melt %>% arrange(breeding_material)

# check relative abundance of individual genus
phy.fun.all_Genus_melt %>% 
  group_by(Genus, genotype) %>% 
  summarise(Abundance = sum(Abundance)) %>% 
  group_by(Genus) %>% 
  summarise(mean = mean(Abundance)) %>% 
  slice_max(mean, n = 10)

# check relative abundance of individual genus WITHOUT unassigned taxa
phy.fun.all_Genus_ <- subset_taxa(phy.fun.all_Genus_, Genus != "unassigned")
phy.fun.all_Genus <- transform_sample_counts(phy.fun.all_Genus_, function(x) 100 * x/sum(x)) 
phy.fun.all_Genus_melt <- psmelt(phy.fun.all_Genus) 

phy.fun.all_Genus_melt %>% 
  group_by(Genus, genotype) %>% 
  summarise(Abundance = sum(Abundance)) %>% 
  group_by(Genus) %>% 
  summarise(mean = mean(Abundance)) %>% 
  slice_max(mean, n = 10)

# Find corresponding OTU
tax_table(phy.fun.all) %>% as.data.frame() %>%  filter(Genus == "Dactylonectria")
```

### Species
```{r}
phy.fun.all_Species_ <- tax_glom(phy.fun_red, "Species") 
phy.fun.all_Species <- transform_sample_counts(phy.fun.all_Species_, function(x) 100 * x/sum(x)) 

# melt phyloseq object
phy.fun.all_Species_melt <- psmelt(phy.fun.all_Species) 

# arrange
phy.fun.all_Species_melt <- phy.fun.all_Species_melt %>% arrange(genotype)
phy.fun.all_Species_melt <- phy.fun.all_Species_melt %>% arrange(breeding_material)

# check relative abundance of individual species
phy.fun.all_Species_melt %>%
  group_by(Species, genotype) %>% 
  summarise(Abundance = sum(Abundance)) %>% 
  group_by(Species) %>% 
  summarise(mean = mean(Abundance)) %>% 
  slice_max(mean, n = 15)

# check relative abundance of individual genus WITHOUT unassigned taxa
phy.fun.all_Species_ <- subset_taxa(phy.fun.all_Species_, Species != "unassigned")
phy.fun.all_Species <- transform_sample_counts(phy.fun.all_Species_, function(x) 100 * x/sum(x)) 
phy.fun.all_Species_melt <- psmelt(phy.fun.all_Species) 

phy.fun.all_Species_melt %>%
  group_by(Species, genotype) %>% 
  summarise(Abundance = sum(Abundance)) %>% 
  group_by(Species) %>% 
  summarise(mean = mean(Abundance)) %>% 
  slice_max(mean, n = 15)

# Find OTUs corresponding to Dactylonectria estremocensis 
tax_table(phy.fun.all) %>% as.data.frame() %>%  filter(Species == "Dactylonectria_estremocensis_SH2456106.08FU")

```

# Search for known taxa of interest in the dataset
```{r}
# Nectriaceae (Fusarium etc.)
nect_uniq <- tab_tax %>% 
  filter(Family == "Nectriaceae",
         !is.na(Genus)) %>%  pull(Genus) %>% unique()
tab_tax %>% 
  filter(Genus %in% nect_uniq)

# Glomeromycota (Check while knowing that our primers do not well amplify Glomeromycota)
tab_tax %>% 
  filter(Phylum %in% "Glomeromycota")

# Clonostachys
tab_tax %>% 
  filter(Genus == "Clonostachys")

tab_tax %>% 
  filter(Family == "Bionectriaceae") # BLASTn fOTU60: possibly Clonostachys rosea

# Didymellaceae
tab_tax %>% 
  filter(Family == "Didymellaceae") # BLASTn fOTU40:  possibly Ascochyta pisi (Didymella pisi is the teliomorph stage of Ascochyta pisi)
                                    # BLASTn fOTU1350: no hit

# Rhizoctonia
tab_tax %>%
  filter(Phylum %in% "Rhizoctonia")

tab_tax %>% 
  filter(Family == "Ceratobasidiaceae") # BLASTn fOTU831: possibly Rhizoctonia
                                        # BLASTn fOTU578: possibly Rhizoctonia or Ceratobasidium
                                        # BLASTn fOTU335: possibly Ceratobasidium
                                        # BLASTn fOTU140: possibly Rhizoctonia (probaly solani)

# Check abundance
t.all <- psmelt(phy.fun_rel)

## Function for plot
ggplot_ind_OTU <- function(data, x, y, my_OTU) {
  ggplot(data %>% filter(OTU == my_OTU), aes(x = {{x}}, y = {{y}})) +
  ggbeeswarm::geom_quasirandom() + 
  geom_smooth(method = "lm", formula = 'y ~ x') +
  stat_cor(aes(label = paste(after_stat(rr.label), after_stat(..p.label..), sep = "~`,`~"))) 
}

## Look at Glomeromycota ("fOTU1020")
ggplot_ind_OTU(t.all, RRI, Abundance, "fOTU1020")
ggplot_ind_OTU(t.all, emergence, Abundance, "fOTU1020")
ggplot_ind_OTU(t.all, shoot_dw_ratio_SNS, Abundance, "fOTU1020")

## Look at putative Clonostachys rosea ("fOTU60")
ggplot_ind_OTU(t.all, RRI, Abundance, "fOTU60")
ggplot_ind_OTU(t.all, emergence, Abundance, "fOTU60")
ggplot_ind_OTU(t.all, shoot_dw_ratio_SNS, Abundance, "fOTU60")

## Look at putative Didymella pisi ("fOTU40")
ggplot_ind_OTU(t.all, RRI, Abundance, "fOTU40")
ggplot_ind_OTU(t.all, emergence, Abundance, "fOTU40")
ggplot_ind_OTU(t.all, shoot_dw_ratio_SNS, Abundance, "fOTU40")

## Function for plot of Necriaceae
ggplot_OTU_fam <- function(data, x, y, fill, facet, my_Genus) {
  ggplot(data %>% filter(Genus == my_Genus), aes(x = {{x}}, y = {{y}}, 
                                                 color = {{fill}})) +
  ggbeeswarm::geom_quasirandom() + 
  geom_smooth(method = "lm") +
  stat_cor(aes(label = paste(after_stat(rr.label), after_stat(..p.label..), sep = "~`,`~")), 
           label.y = Inf, vjust = 1) +
  facet_wrap(vars({{facet}}), scales = "free")
}
### Fusarium
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Fusarium")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Fusarium")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Fusarium")


### Dactylonectria
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Dactylonectria")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Dactylonectria")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Dactylonectria")

### Ilyonectria
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Ilyonectria")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Ilyonectria")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Ilyonectria")

### Gibberella
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Gibberella")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Gibberella")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Gibberella")

### Fusicolla
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Fusicolla")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Fusicolla")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Fusicolla")

### Paracremonium
ggplot_OTU_fam(t.all, RRI, Abundance, OTU, OTU, "Paracremonium")
ggplot_OTU_fam(t.all, emergence, Abundance, OTU, OTU, "Paracremonium")
ggplot_OTU_fam(t.all, shoot_dw_ratio_SNS, Abundance, OTU, OTU, "Paracremonium")

### Ceratobasidiaceae
t.all %>% filter(Family == "Ceratobasidiaceae") %>% 
  group_by(OTU) %>% 
  summarise(
    Abundance_mean = mean(Abundance, na.rm = TRUE),
    Abundance_median = median(Abundance))

## Look individual potential rhizoctonia
ggplot_ind_OTU(t.all, RRI, Abundance, "fOTU831")
ggplot_ind_OTU(t.all, emergence, Abundance, "fOTU831")
ggplot_ind_OTU(t.all, shoot_dw_ratio_SNS, Abundance, "fOTU831")

```


```{r}

```

